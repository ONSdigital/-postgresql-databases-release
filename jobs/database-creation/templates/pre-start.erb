#!/bin/sh
#

set -ex

# We log everything to stderr so that we can see the stdout and stderr inline with each other
# If we don't, we get the stdout whilst the errand is running and then the stderr later on

log(){
	cat 2<%= '>&' %>1 <%= '<<' %>EOF
$@
EOF
}

PACKAGE_DIR=/var/vcap/packages/postgres-utils-9.6.7
S3_BOSH_CLI=/var/vcap/packages/bosh-s3cli/bin/bosh-s3cli
PSQL="$PACKAGE_DIR/bin/psql"

# This is not the correct location
S3_CONFIG_JSON=/var/vcap/packages/s3-config/config/s3-config.json

<% p('postgresql_databases').each do |rdms| %>
	ADMIN_USERNAME='<%= rdms['admin_username'] %>'
	ADMIN_DATABASE='<%= rdms['admin_database'] %>'
	PG_HOST='<%= rdms['postgresql_host'] %>'

	export PGPORT='<%= rdms['postgresql_port'] %>'
	export PGPASSWORD='<%= rdms['admin_password'] %>'

	<% if rdms['global_extensions'] %>
		# Install default extensions
		# If we install the extenions to template1, then all new databases will have them
		<% rdms['global_extensions'].each do |extension| %>
			log "Installing <%= extension %>
			"$PSQL" -d 'template1' -U"$ADMIN_USERNAME" -h"$PG_HOST" -c 'CREATE EXTENSION IF NOT EXISTS <%= extension %>' 2<%= '>&' %>1
		<% end %>
	<% end %>

	<% rdms['databases'].each do |database| %>
		DUMP_FILE='pgdmp-<%= database['name'] %>.sql'
		DUMP_LOCAL_FILE="/tmp/$DUMP_FILE"
		DUMP_S3_FILE="databases/$DUMP_FILE"

		# Check if the database exists
		if "$PSQL" -Atc "SELECT true FROM pg_database WHERE datname='<%= database['name'] %>'" -U"$ADMIN_USERNAME" -h"$PG_HOST" "$ADMIN_DATABASE" | grep -qE '^t$'; then

			log 'Database already exists: <%= database['name'] %>'

			<% if database['drop_existing'] %>
				log 'Dropping database: <%= database['name'] %>'
				"$PSQL" -Atc "DROP DATABASE <%= database['name'] %>" -U"$ADMIN_USERNAME" -h"$PG_HOST" "$ADMIN_DATABASE"

			<% elsif database['ignore_existing'] %>
				DATABASE_EXISTS=1
			<% else %>
				log 'Database already exists: <%= database['name'] %>'

				exit 1
			<% end %>
		fi

		if [ -z "$DATABASE_EXISTS" ]; then
			<% if database['name'] != 'all' %>
				<% if database['username'] %>
					create_db_command='CREATE DATABASE <%= database['name'] %> OWNER <%= database['username'] %>'

					if "$PSQL" -Atc "SELECT true FROM pg_roles WHERE rolname='<%= database['username'] %>'" -U"$ADMIN_USERNAME" -h"$PG_HOST" | \
        	        			grep -qE '^t$'; then

						log 'Ensuring user has the correct password: <%= database['username'] %>'
						"$PSQL" -d "$ADMIN_DATABASE" -U"$ADMIN_USERNAME" -h"$PG_HOST" \
							-c "ALTER ROLE <%= database['username'] %> WITH ENCRYPTED PASSWORD '<%= database['password'] %>' LOGIN" 2<%= '>&' %>1
					else
						log 'Creating user: <%= database['username'] %>'
						"$PSQL" -d "$ADMIN_DATABASE" -U"$ADMIN_USERNAME" -h"$PG_HOST" \
							-c "CREATE ROLE <%= database['username'] %> WITH ENCRYPTED PASSWORD '<%= database['password'] %>' LOGIN" 2<%= '>&' %>1
					fi

					<% if rdms['rds'] %>
						# With an PostgreSQL RDS database you don't have the usual 'postgres' admin/superuser permissions, so we
						# need to jump through an additional hoop so we can grant user permissions
						log 'Assigning role to current user'
						"$PSQL" -d "$ADMIN_DATABASE" -U"$ADMIN_USERNAME" -h"$PG_HOST" -c "GRANT <%= database['username'] %> TO $ADMIN_USERNAME" 2<%= '>&' %>1
					<% end %>

					<% if database['options'] %>
						log 'Adding user options'
						<% database['options'].each do |option| %>
							log '. option: <%= option %>'
							"$PSQL" -d "$ADMIN_DATABASE" -U"$ADMIN_USERNAME" -h"$PG_HOST" -c 'ALTER USER <%= database['username'] %> WITH <%= option %>' 2<%= '>&' %>1
						<% end %>
					<% end %>
				<% else %>
					create_db_command='CREATE DATABASE <%= database['name'] %>'
				<% end %>

				log 'Creating database: <%= database['name'] %>'
				"$PSQL" -d "$ADMIN_DATABASE" -U"$ADMIN_USERNAME" -h"$PG_HOST" -c "$create_db_command" 2<%= '>&' %>1

				<% if database['extensions'] %>
					log 'Creating extensions'
					<% database['extensions'].each do |extension| %>
						log '. extension: <%= extension %>'
						"$PSQL" -d '<%= database['name'] %>' -U"$ADMIN_USERNAME" -h"$PG_HOST" -c 'CREATE EXTENSION IF NOT EXISTS <%= extension %>' 2<%= '>&' %>1
					<% end %>
				<% end %>
			<% end %>

			<% if p('s3_config.bucket_name') && ! database['no_restore'] %>
				if [ -n "$create_db_command" ]; then

					# Copy from S3
					if "$S3_BOSH_CLI" -c "$S3_CONFIG_JSON" exists "$DUMP_S3_FILE"; then
						log "Copying database dump $DUMP_S3_FILE"
						"$S3_BOSH_CLI" -c "$S3_CONFIG_JSON" get "$DUMP_S3_FILE" "$DUMP_LOCAL_FILE" 2<%= '>&' %>1

						log 'Restoring database dump to <%= database['name'] %>'
						"$PSQL" -d '<%= database['name'] %>' -U"$ADMIN_USERNAME" -h"$PG_HOST" \
							<%= '<' %>"$DUMP_LOCAL_FILE" 2<%= '>&' %>1
					else
						log "Remote backup does not exist: s3://<%= p('s3_config.bucket_name') %>/$DUMP_S3_FILE"
					fi
				fi
			<% end %>
		fi

		unset DATABASE_EXISTS
	<% end %>
<% end %>
